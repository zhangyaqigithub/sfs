<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	<!-- 第一步：配置外部的属性配置文件 -->
	<bean id="dbProperty" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	
		<!-- 配置外部文件路径 -->
		<property name="location">
			<value>classpath:database.properties</value>
		</property>
	</bean>	
	<!-- 第一步1、：配置数据源，数据库连接信息 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
			<property name="driverClassName" value="${driver}"></property>
			<property name="url" value="${url}"></property>
			<property name="username" value="${user}"></property>
			<property name="password" value="${password}"></property>
			
			<!-- 配置SQL心跳包 -->
	</bean>	
	
	<!-- 第二步：配置sqlsessionFactoryBean -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
			
			<!-- 1、配置数据源 -->
			<property name="dataSource" ref="dataSource"></property>
			
			<!-- 2、引用mybatis的核心配置文件 -->
			<property name="configLocation" 
			 			value="classpath:mybatis-config.xml"></property>
			 
			 <!--3、配置mybatis的sql映射文件 -->
			 <property name="mapperLocations">
			 		<list>
			 			<value>classpath:cn/appsys/dao/**/*.xml</value>
			 		</list>
			 </property>			
	</bean>
	
	<!-- 第三步：扫描数据访问 -->	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.appsys.dao"></property>
	</bean>	
	
	<!-- 第四步：业务层 -->
		<!-- 开启对注解类的支持 -->
	<context:component-scan base-package="cn.appsys.service"></context:component-scan>
	
	<!-- 第五步：事务 -->
	<!-- 1、通过《tx:advice>配置事物增强 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" propagation="REQUIRED"></tx:method>
			<tx:method name="add*" propagation="REQUIRED"
					rollback-for="java.io.IOException"></tx:method>
			<tx:method name="del*" propagation="REQUIRED"></tx:method>
			<tx:method name="update*" propagation="REQUIRED"></tx:method>
			<tx:method name="*" propagation="REQUIRED"></tx:method>
		</tx:attributes>
	</tx:advice>
	
	<!-- 2、配置切面 ，将事物增强和方法切入点组合-->
	<aop:config>
		<aop:pointcut expression="execution(* cn.appsys.service..*.*(..))" id="pointcut"/>
		<!-- 将事物进行织入 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
	</aop:config>
</beans>

















